"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4038],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=m(t),p=a,g=u["".concat(s,".").concat(p)]||u[p]||d[p]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8826:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2},i="Create Eligibility API",l={unversionedId:"Eligibility API/create-eligibility-api",id:"Eligibility API/create-eligibility-api",title:"Create Eligibility API",description:"Access request params",source:"@site/docs/Eligibility API/create-eligibility-api.md",sourceDirName:"Eligibility API",slug:"/Eligibility API/create-eligibility-api",permalink:"/documentation/docs/Eligibility API/create-eligibility-api",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/documentation/docs/Eligibility API/pre-requisites"},next:{title:"Congratulations!",permalink:"/documentation/docs/Eligibility API/congratulations"}},s={},m=[{value:"Optionally add code to connect to locally running dynamodb",id:"optionally-add-code-to-connect-to-locally-running-dynamodb",level:2},{value:"Update handler.js if using local dynamoDb",id:"update-handlerjs-if-using-local-dynamodb",level:2}],c={toc:m};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-eligibility-api"},"Create Eligibility API"),(0,a.kt)("p",null,"Access request params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},"const { firstName, lastName, email } = JSON.parse(event?.body) || {};\n")),(0,a.kt)("p",null,"Handle Bad Requests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'...\nconst {\n  BadRequest,\n  lambdaResponse,\n} = require("mern-common-layer");\n...\nif (!firstName || !lastName || !email) {\n  logger.debug("***BadRequest***", { firstName, lastName, email });\n\n  return lambdaResponse(\n    new BadRequest("Bad Request", [\n      { name: "firstName", type: "body" },\n      { name: "lastName", type: "body" },\n      { name: "email", type: "body" },\n    ])\n  );\n}\n')),(0,a.kt)("p",null,"Get data from DynamoDb"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'...\nconst { TABLE_NAME } = require("./env");\nconst { getItem } = require("mern-database-layer");\n...\nconst record = await getItem(TABLE_NAME, { EmailId: email });\n')),(0,a.kt)("p",null,"Check if data exists in DB and update"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'...\nconst {\n  BadRequest,\n  NotFound,\n  lambdaResponse,\n} = require("mern-common-layer");\nconst { getItem, putItem } = require("mern-database-layer");\n...\nif (record.Item) {\n  await putItem(TABLE_NAME, {\n    ...record.Item,\n    FirstName: firstName,\n    LastName: lastName,\n  });\n} else {\n  return lambdaResponse(new NotFound("User Not Found"));\n}\n')),(0,a.kt)("p",null,"Return success response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'return lambdaResponse({\n  statusCode: 200,\n  body: {\n    message: "User record updated successfully!",\n  },\n});\n')),(0,a.kt)("p",null,"Complete code with Exception handling"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'"use strict";\nconst {\n  InternalServerError,\n  BadRequest,\n  NotFound,\n  lambdaResponse,\n} = require("mern-common-layer");\nconst { getLogger } = require("mern-logging-layer");\nconst { getItem, putItem } = require("mern-database-layer");\nconst { TABLE_NAME } = require("./env");\n\nlet logger = getLogger();\n\nmodule.exports.checkExisting = async (event) => {\n  const { firstName, lastName, email } = JSON.parse(event?.body) || {};\n\n  logger.info("***Lambda Started***");\n\n  try {\n    if (!firstName || !lastName || !email) {\n      logger.debug("***BadRequest***", { firstName, lastName, email });\n\n      return lambdaResponse(\n        new BadRequest("Bad Request", [\n          { name: "firstName", type: "body" },\n          { name: "lastName", type: "body" },\n          { name: "email", type: "body" },\n        ])\n      );\n    }\n\n    logger.info("Fetching item from DynamoDB", { email });\n    const record = await getItem(TABLE_NAME, {\n      EmailId: email,\n    });\n\n    if (record) {\n      logger.info("Item found, updating record", { record });\n      await putItem(TABLE_NAME, {\n        ...record,\n        FirstName: firstName,\n        LastName: lastName,\n        DateModified: new Date().toISOString(),\n      });\n    } else {\n      logger.warn("User not found", { email });\n      return lambdaResponse(new NotFound("User Not Found"));\n    }\n\n    logger.info("User record updated successfully");\n    return lambdaResponse({\n      statusCode: 200,\n      body: {\n        message: "User record updated successfully!",\n      },\n    });\n  } catch (err) {\n    logger.error("***Internal Server Error***", err);\n\n    return lambdaResponse(new InternalServerError());\n  }\n};\n')),(0,a.kt)("h2",{id:"optionally-add-code-to-connect-to-locally-running-dynamodb"},"Optionally add code to connect to locally running dynamodb"),(0,a.kt)("p",null,"Start by creating a file db.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="db.js"',title:'"db.js"'},'const AWS = require("aws-sdk");\nconst { getLogger } = require("mern-logging-layer");\n\nlet logger = getLogger();\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient({\n  region: "us-west-2",\n  endpoint: "http://localhost:8000",\n});\n\nasync function getItem(tableName, key) {\n  const params = {\n    TableName: tableName,\n    Key: key,\n  };\n\n  try {\n    const data = await dynamoDb.get(params).promise();\n    return data.Item;\n  } catch (error) {\n    logger.error("Error getting item from DynamoDB:", error);\n    throw new Error("Could not get item from DynamoDB");\n  }\n}\n\nasync function putItem(tableName, item) {\n  const params = {\n    TableName: tableName,\n    Item: item,\n  };\n\n  try {\n    await dynamoDb.put(params).promise();\n  } catch (error) {\n    logger.error("Error putting item into DynamoDB:", error);\n    throw new Error("Could not put item into DynamoDB");\n  }\n}\n\nmodule.exports = {\n  dynamoDb,\n  getItem,\n  putItem,\n};\n')),(0,a.kt)("h2",{id:"update-handlerjs-if-using-local-dynamodb"},"Update handler.js if using local dynamoDb"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="handler.js"',title:'"handler.js"'},'"use strict";\n...\nconst { getItem, putItem } = require("./db");\n\n...\n')))}d.isMDXComponent=!0}}]);