"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6469:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="Create Localization API",l={unversionedId:"Localization API/create-localization-api",id:"Localization API/create-localization-api",title:"Create Localization API",description:"Add new environment variable for S3 bucket",source:"@site/docs/Localization API/create-localization-api.md",sourceDirName:"Localization API",slug:"/Localization API/create-localization-api",permalink:"/documentation/docs/Localization API/create-localization-api",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/documentation/docs/Localization API/pre-requisites"},next:{title:"Congratulations!",permalink:"/documentation/docs/Localization API/congratulations"}},c={},s=[],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-localization-api"},"Create Localization API"),(0,a.kt)("p",null,"Add new environment variable for S3 bucket"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="env.yml"',title:'"env.yml"'},'BUCKET_NAME: "mern-resource-bundles"\nLOG_LEVEL: "debug"\n')),(0,a.kt)("p",null,"Access request params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},"const { locale, namespace, projectId, version } = event.pathParameters || {};\n")),(0,a.kt)("p",null,"Prepare S3 path based on request params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},"let path = `projects/${projectId}/${version}/${locale}`;\nif (namespace) {\n  path = `${path}/${namespace}/content.json`;\n} else {\n  path = `${path}/content.json`;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Read contents from S3"',title:'"Read',contents:!0,from:!0,'S3"':!0},"const file = await s3\n  .getObject({\n    Bucket: BUCKET_NAME,\n    Key: path,\n  })\n  .promise();\n")),(0,a.kt)("p",null,"Return success response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'return lambdaResponse({\n  statusCode: 200,\n  body: JSON.parse(file.Body.toString("utf-8")),\n});\n')),(0,a.kt)("p",null,"Complete code with Exception handling"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'"use strict";\nconst AWS = require("aws-sdk");\nconst { BUCKET_NAME } = require("./env");\nconst { getLogger } = require("mern-logging-layer");\nconst { InternalServerError, lambdaResponse } = require("mern-common-layer");\n\nAWS.config.update({ region: "us-east-1" });\n\nlet logger = getLogger();\nconst s3 = new AWS.S3({ apiVersion: "2006-03-01" });\n\nmodule.exports.getBundle = async (event) => {\n  const { locale, namespace, projectId, version } = event.pathParameters || {};\n\n  logger.info("***Lambda Started***");\n\n  try {\n    let path = `projects/${projectId}/${version}/${locale}`;\n    if (namespace) {\n      path = `${path}/${namespace}/content.json`;\n    } else {\n      path = `${path}/content.json`;\n    }\n\n    const file = await s3\n      .getObject({\n        Bucket: BUCKET_NAME,\n        Key: path,\n      })\n      .promise();\n\n    return lambdaResponse({\n      statusCode: 200,\n      body: JSON.parse(file.Body.toString("utf-8")),\n    });\n  } catch (err) {\n    logger.error("***Internal Server Error***", err);\n\n    return lambdaResponse(new InternalServerError());\n  }\n};\n')))}u.isMDXComponent=!0}}]);