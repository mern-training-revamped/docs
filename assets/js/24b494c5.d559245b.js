"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1468],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=t.createContext({}),d=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=d(e.components);return t.createElement(i.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||o;return n?t.createElement(f,s(s({ref:r},p),{},{components:n})):t.createElement(f,s({ref:r},p))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var d=2;d<o;d++)s[d]=n[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9965:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},s="Create Profile API",l={unversionedId:"Profile API/create-profile-api",id:"Profile API/create-profile-api",title:"Create Profile API",description:"Access request params",source:"@site/docs/Profile API/create-profile-api.md",sourceDirName:"Profile API",slug:"/Profile API/create-profile-api",permalink:"/documentation/docs/Profile API/create-profile-api",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/documentation/docs/Profile API/pre-requisites"},next:{title:"Congratulations!",permalink:"/documentation/docs/Profile API/congratulations"}},i={},d=[],p={toc:d};function c(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-profile-api"},"Create Profile API"),(0,a.kt)("p",null,"Access request params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},"const { emailId, userId, password } = JSON.parse(event?.body) || {};\n")),(0,a.kt)("p",null,"Handle Bad Requests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'if (!emailId || !userId || !password) {\n  logger.debug("***BadRequest***", { emailId, userId, password });\n\n  return lambdaResponse(\n    new BadRequest("Bad Request", [\n      { name: "emailId", type: "body" },\n      { name: "userId", type: "body" },\n      { name: "password", type: "body" },\n    ])\n  );\n}\n')),(0,a.kt)("p",null,"Get data from DynamoDb"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'const record = await getItem("Profile", { EmailId: emailId });\n')),(0,a.kt)("p",null,"Check if data exists in DB and Update"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'if (record?.Item?.EmailId) {\n  return lambdaResponse(new Frobidden("User Not Found"));\n}\n\nawait putItem("Profile", {\n  EmailId: emailId,\n  Username: userId,\n  Password: password,\n});\n')),(0,a.kt)("p",null,"Return success response"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'return lambdaResponse({\n  statusCode: 200,\n  body: {\n    message: "Profile created successfully!",\n  },\n});\n')),(0,a.kt)("p",null,"Complete code with Exception handling"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="handler.js"',title:'"handler.js"'},'"use strict";\nconst {\n  InternalServerError,\n  BadRequest,\n  Frobidden,\n  lambdaResponse,\n} = require("mern-common-layer");\nconst { getLogger } = require("mern-logging-layer");\n\nconst { getItem, putItem } = require("mern-database-layer");\n\nlet logger = getLogger();\n\nmodule.exports.createProfile = async (event) => {\n  const { emailId, userId, password } = JSON.parse(event?.body) || {};\n\n  logger.info("***Lambda Started***");\n\n  try {\n    if (!emailId || !userId || !password) {\n      logger.debug("***BadRequest***", { emailId, userId, password });\n\n      return lambdaResponse(\n        new BadRequest("Bad Request", [\n          { name: "emailId", type: "body" },\n          { name: "userId", type: "body" },\n          { name: "password", type: "body" },\n        ])\n      );\n    }\n\n    const record = await getItem("Profile", { EmailId: emailId });\n\n    if (record?.Item?.EmailId) {\n      return lambdaResponse(new Frobidden("User Not Found"));\n    }\n\n    await putItem("Profile", {\n      EmailId: emailId,\n      Username: userId,\n      Password: password,\n    });\n\n    return lambdaResponse({\n      statusCode: 200,\n      body: {\n        message: "Profile created successfully!",\n      },\n    });\n  } catch (err) {\n    logger.error("***Internal Server Error***", err);\n\n    return lambdaResponse(new InternalServerError());\n  }\n};\n')))}c.isMDXComponent=!0}}]);